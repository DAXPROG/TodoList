/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.10
 * Generated at: 2025-08-13 11:52:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import com.model.Todo;

public final class todo_002dlist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.model.Todo");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');

    // Get the todos list from request attribute
    List<Todo> todos = (List<Todo>) request.getAttribute("todos");

      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>Todo List</title>\n");
      out.write("    <style>\n");
      out.write("        table { width: 100%; border-collapse: collapse; }\n");
      out.write("        th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }\n");
      out.write("        tr:hover { background-color: #f5f5f5; }\n");
      out.write("        .filter { margin-bottom: 20px; }\n");
      out.write("        .container{\n");
      out.write("          width: 60%;\n");
      out.write("          margin-left: auto;\n");
      out.write("          margin-right: auto;\n");
      out.write("          text-align: center;\n");
      out.write("          box-shadow: 0px 0px 30px black;\n");
      out.write("          border-radius: 5px;\n");
      out.write("          padding: 10px 30px;\n");
      out.write("          margin-top:30px;\n");
      out.write("        }\n");
      out.write("        input,select{\n");
      out.write("          padding: 10px;\n");
      out.write("          border-radius: 6px;\n");
      out.write("          border: none;\n");
      out.write("          background-color: lightblue;\n");
      out.write("        }\n");
      out.write("        button{\n");
      out.write("        padding: 10px;\n");
      out.write("        border-radius: 6px;\n");
      out.write("        border: none;\n");
      out.write("        background-color: green;\n");
      out.write("        color: white;\n");
      out.write("        cursor: pointer;\n");
      out.write("        transition: ease 0.1s;\n");
      out.write("        }\n");
      out.write("        button:active{\n");
      out.write("          background-color: tomato;\n");
      out.write("        }\n");
      out.write("        .add{\n");
      out.write("           background-color: aqua;\n");
      out.write("           padding: 0px 30px;\n");
      out.write("           margin: 10px;\n");
      out.write("           border-radius: 10px;\n");
      out.write("           text-decoration: none;\n");
      out.write("           color: darkblue;\n");
      out.write("           font-size: 40px;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div class=\"container\">\n");
      out.write("    <h1>Todo List</h1>\n");
      out.write("\n");
      out.write("    <div class=\"filter\">\n");
      out.write("        <form action=\"todos\" method=\"get\">\n");
      out.write("            <label for=\"status\">Filter by Status:</label>\n");
      out.write("            <select name=\"status\" id=\"status\">\n");
      out.write("                <option value=\"\">All</option>\n");
      out.write("                <option value=\"pending\">Pending</option>\n");
      out.write("                <option value=\"in-progress\">In Progress</option>\n");
      out.write("                <option value=\"completed\">Completed</option>\n");
      out.write("            </select>\n");
      out.write("            <button type=\"submit\">Filter</button>\n");
      out.write("        </form>\n");
      out.write("        <form action=\"todos\" method=\"post\">\n");
      out.write("        <input type=\"text\" name=\"title\" placeholder=\"Todo Name\" required>\n");
      out.write("                From:<input type=\"date\" name=\"from\" required>\n");
      out.write("                To:<input type=\"date\" name=\"to\" required>\n");
      out.write("\n");
      out.write("                    <button type=\"submit\">Search</button>\n");
      out.write("        </form>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <table>\n");
      out.write("            <tr>\n");
      out.write("                <th>Title</th>\n");
      out.write("                <th>Status</th>\n");
      out.write("                <th>Created At</th>\n");
      out.write("                <th>Actions</th>\n");
      out.write("            </tr>\n");
      out.write(" ");

            if (todos != null) {
                for (Todo todo : todos) {
            
      out.write("\n");
      out.write("                <tr>\n");
      out.write("                    <td>");
      out.print( todo.getTitle() );
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( todo.getStatus() );
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( todo.getDate() );
      out.write("</td>\n");
      out.write("                    <td>\n");
      out.write("                        <a href=\"delete-todo?id=");
      out.print( todo.getId() );
      out.write("\"\n");
      out.write("                           onclick=\"return confirm('Are you sure you want to delete this item?')\">Delete</a>\n");
      out.write("                    </td>\n");
      out.write("                </tr>\n");
      out.write("            ");

                }
            }
            
      out.write("\n");
      out.write("    </table>\n");
      out.write("\n");
      out.write("    <br>\n");
      out.write("    <br>\n");
      out.write("    <a href=\"add-todo.jsp\" class=\"add\">+</a>\n");
      out.write("    <br>\n");
      out.write("    <br>\n");
      out.write("    </div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
